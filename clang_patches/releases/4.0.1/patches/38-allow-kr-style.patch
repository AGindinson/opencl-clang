diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/Sema/SemaType.cpp b/lib/Sema/SemaType.cpp
--- a/lib/Sema/SemaType.cpp	2017-10-17 19:47:05.405287585 +0300
+++ b/lib/Sema/SemaType.cpp	2017-10-17 19:53:55.389308003 +0300
@@ -4326,7 +4326,7 @@
 
       FunctionType::ExtInfo EI(getCCForDeclaratorChunk(S, D, FTI, chunkIndex));
 
-      if (!FTI.NumParams && !FTI.isVariadic && !LangOpts.CPlusPlus) {
+      if (!FTI.NumParams && !FTI.isVariadic && !LangOpts.CPlusPlus  && !LangOpts.OpenCL) {
         // Simple void foo(), where the incoming T is the result type.
         T = Context.getFunctionNoProtoType(T, EI);
       } else {
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/test/SemaOpenCL/function-no-args.cl b/test/SemaOpenCL/function-no-args.cl
--- a/test/SemaOpenCL/function-no-args.cl	1970-01-01 03:00:00.000000000 +0300
+++ b/test/SemaOpenCL/function-no-args.cl	2017-10-17 19:53:55.393308003 +0300
@@ -0,0 +1,9 @@
+// RUN: %clang_cc1 -verify -pedantic -fsyntax-only -cl-std=CL2.0 %s
+// expected-no-diagnostics
+
+global int gi;
+int my_func();
+int my_func() {
+  gi = 2;
+  return gi;
+}
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/test/SemaOpenCL/invalid-pipes-cl2.0.cl b/test/SemaOpenCL/invalid-pipes-cl2.0.cl
--- a/test/SemaOpenCL/invalid-pipes-cl2.0.cl	2017-10-17 16:38:05.344722815 +0300
+++ b/test/SemaOpenCL/invalid-pipes-cl2.0.cl	2017-10-17 19:53:55.393308003 +0300
@@ -3,7 +3,7 @@
 global pipe int gp;            // expected-error {{type '__global read_only pipe int' can only be used as a function parameter in OpenCL}}
 global reserve_id_t rid;          // expected-error {{the '__global reserve_id_t' type cannot be used to declare a program scope variable}}
 
-extern pipe write_only int get_pipe(); // expected-error {{type '__global write_only pipe int ()' can only be used as a function parameter in OpenCL}}
+extern pipe write_only int get_pipe(); // expected-error {{type '__global write_only pipe int (void)' can only be used as a function parameter in OpenCL}}
 
 kernel void test_invalid_reserved_id(reserve_id_t ID) { // expected-error {{'reserve_id_t' cannot be used as the type of a kernel parameter}}
 }
