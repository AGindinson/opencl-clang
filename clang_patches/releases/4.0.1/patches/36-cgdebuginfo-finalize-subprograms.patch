diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/CodeGen/CGDebugInfo.cpp b/lib/CodeGen/CGDebugInfo.cpp
--- a/lib/CodeGen/CGDebugInfo.cpp	2017-10-17 14:24:50.104324628 +0300
+++ b/lib/CodeGen/CGDebugInfo.cpp	2017-10-17 19:49:24.173294496 +0300
@@ -3194,7 +3194,7 @@
   LexicalBlockStack.pop_back();
 }
 
-void CGDebugInfo::EmitFunctionEnd(CGBuilderTy &Builder) {
+void CGDebugInfo::EmitFunctionEnd(CGBuilderTy &Builder, llvm::Function *Fn) {
   assert(!LexicalBlockStack.empty() && "Region stack mismatch, stack empty!");
   unsigned RCount = FnBeginRegionCount.back();
   assert(RCount <= LexicalBlockStack.size() && "Region stack mismatch");
@@ -3206,6 +3206,9 @@
     LexicalBlockStack.pop_back();
   }
   FnBeginRegionCount.pop_back();
+
+  if (Fn && Fn->getSubprogram())
+    DBuilder.finalizeSubprogram(Fn->getSubprogram());
 }
 
 llvm::DIType *CGDebugInfo::EmitTypeForVarWithBlocksAttr(const VarDecl *VD,
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/CodeGen/CGDebugInfo.h b/lib/CodeGen/CGDebugInfo.h
--- a/lib/CodeGen/CGDebugInfo.h	2017-10-17 14:06:40.244270350 +0300
+++ b/lib/CodeGen/CGDebugInfo.h	2017-10-17 19:49:24.173294496 +0300
@@ -340,7 +340,7 @@
   void EmitFunctionDecl(GlobalDecl GD, SourceLocation Loc, QualType FnType);
 
   /// Constructs the debug code for exiting a function.
-  void EmitFunctionEnd(CGBuilderTy &Builder);
+  void EmitFunctionEnd(CGBuilderTy &Builder, llvm::Function *Fn);
 
   /// Emit metadata to indicate the beginning of a new lexical block
   /// and push the block onto the stack.
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/CodeGen/CodeGenFunction.cpp b/lib/CodeGen/CodeGenFunction.cpp
--- a/lib/CodeGen/CodeGenFunction.cpp	2017-10-17 15:36:38.204539185 +0300
+++ b/lib/CodeGen/CodeGenFunction.cpp	2017-10-17 19:49:24.173294496 +0300
@@ -343,7 +343,7 @@
 
   // Emit debug descriptor for function end.
   if (CGDebugInfo *DI = getDebugInfo())
-    DI->EmitFunctionEnd(Builder);
+    DI->EmitFunctionEnd(Builder, CurFn);
 
   // Reset the debug location to that of the simple 'return' expression, if any
   // rather than that of the end of the function's scope '}'.
