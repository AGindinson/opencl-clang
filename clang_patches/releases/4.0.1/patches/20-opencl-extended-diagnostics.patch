diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/include/clang/Basic/DiagnosticSemaKinds.td b/include/clang/Basic/DiagnosticSemaKinds.td
--- a/include/clang/Basic/DiagnosticSemaKinds.td	2017-10-17 15:00:36.612431531 +0300
+++ b/include/clang/Basic/DiagnosticSemaKinds.td	2017-10-17 15:32:43.860527514 +0300
@@ -8160,9 +8160,9 @@
   "return value cannot be qualified with address space">;
 def err_opencl_constant_no_init : Error<
   "variable in constant address space must be initialized">;
-def err_atomic_init_constant : Error<
-  "atomic variable can only be assigned to a compile time constant"
-  " in the declaration statement in the program scope">;
+def err_opencl_atomic_init: Error<
+  "atomic variable can be %select{assigned|initialized}0 to a variable only "
+  "in global address space">;
 def err_opencl_implicit_vector_conversion : Error<
   "implicit conversions between vector types (%0 and %1) are not permitted">;
 def err_opencl_invalid_type_array : Error<
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/Sema/SemaExpr.cpp b/lib/Sema/SemaExpr.cpp
--- a/lib/Sema/SemaExpr.cpp	2017-10-17 14:27:53.580333766 +0300
+++ b/lib/Sema/SemaExpr.cpp	2017-10-17 15:32:43.868527514 +0300
@@ -11101,7 +11101,7 @@
     if (LHSTy->isAtomicType() || RHSTy->isAtomicType()) {
       SourceRange SR(LHSExpr->getLocStart(), RHSExpr->getLocEnd());
       if (BO_Assign == Opc)
-        Diag(OpLoc, diag::err_atomic_init_constant) << SR;
+        Diag(OpLoc, diag::err_opencl_atomic_init) << 0 << SR;
       else
         ResultTy = InvalidOperands(OpLoc, LHS, RHS);
       return ExprError();
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/Sema/SemaInit.cpp b/lib/Sema/SemaInit.cpp
--- a/lib/Sema/SemaInit.cpp	2017-10-17 15:31:52.748524968 +0300
+++ b/lib/Sema/SemaInit.cpp	2017-10-17 15:32:43.872527514 +0300
@@ -6485,6 +6485,20 @@
       << Init->getSourceRange();
   }
 
+  // OpenCL v2.0 s6.13.11.1. atomic variables can be initialized in global scope
+  QualType ETy = Entity.getType();
+  Qualifiers TyQualifiers = ETy.getQualifiers();
+  bool HasGlobalAS = TyQualifiers.hasAddressSpace() &&
+                     TyQualifiers.getAddressSpace() == LangAS::opencl_global;
+
+  if (S.getLangOpts().OpenCLVersion >= 200 &&
+      ETy->isAtomicType() && !HasGlobalAS &&
+      Entity.getKind() == InitializedEntity::EK_Variable && Args.size() > 0) {
+    S.Diag(Args[0]->getLocStart(), diag::err_opencl_atomic_init) << 1 <<
+    SourceRange(Entity.getDecl()->getLocStart(), Args[0]->getLocEnd());
+    return ExprError();
+  }
+
   // Diagnose cases where we initialize a pointer to an array temporary, and the
   // pointer obviously outlives the temporary.
   if (Args.size() == 1 && Args[0]->getType()->isArrayType() &&
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/test/Parser/opencl-atomics-cl20.cl b/test/Parser/opencl-atomics-cl20.cl
--- a/test/Parser/opencl-atomics-cl20.cl	2017-10-17 14:06:40.324270354 +0300
+++ b/test/Parser/opencl-atomics-cl20.cl	2017-10-17 15:32:43.872527514 +0300
@@ -67,7 +67,7 @@
   foo(&i);
 // OpenCL v2.0 s6.13.11.8, arithemtic operations are not permitted on atomic types.
   i++; // expected-error {{invalid argument type 'atomic_int' (aka '_Atomic(int)') to unary expression}}
-  i = 1; // expected-error {{atomic variable can only be assigned to a compile time constant in the declaration statement in the program scope}}
+  i = 1; // expected-error {{atomic variable can be assigned to a variable only in global address space}}
   i += 1; // expected-error {{invalid operands to binary expression ('atomic_int' (aka '_Atomic(int)') and 'int')}}
   i = i + i; // expected-error {{invalid operands to binary expression ('atomic_int' (aka '_Atomic(int)') and 'atomic_int')}}
 }
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/test/SemaOpenCL/atomic-init.cl b/test/SemaOpenCL/atomic-init.cl
--- a/test/SemaOpenCL/atomic-init.cl	1970-01-01 03:00:00.000000000 +0300
+++ b/test/SemaOpenCL/atomic-init.cl	2017-10-17 15:32:43.872527514 +0300
@@ -0,0 +1,12 @@
+// RUN: %clang_cc1 -O0 -cl-std=CL2.0 -fsyntax-only -verify  %s
+
+global atomic_int a1 = 0;
+
+kernel void test_atomic_initialization() {
+  a1 = 1; // expected-error {{atomic variable can be assigned to a variable only in global address space}}
+  atomic_int a2 = 0; // expected-error {{atomic variable can be initialized to a variable only in global address space}}
+  private atomic_int a3 = 0; // expected-error {{atomic variable can be initialized to a variable only in global address space}}
+  local atomic_int a4 = 0; // expected-error {{'__local' variable cannot have an initializer}}
+  global atomic_int a5 = 0; // expected-error {{function scope variable cannot be declared in global address space}}
+  static global atomic_int a6 = 0;
+}
