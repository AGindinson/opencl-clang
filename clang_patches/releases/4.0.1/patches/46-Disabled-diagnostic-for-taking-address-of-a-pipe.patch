diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/Sema/SemaExpr.cpp b/lib/Sema/SemaExpr.cpp
--- a/lib/Sema/SemaExpr.cpp	2017-10-17 20:09:25.481354324 +0300
+++ b/lib/Sema/SemaExpr.cpp	2017-10-17 20:20:38.749387855 +0300
@@ -11838,7 +11838,7 @@
     if ((Opc != UO_AddrOf && Ty->isAtomicType()) ||
     // OpenCL special types - image, sampler, pipe, and blocks are to be used
     // only with a builtin functions and therefore should be disallowed here.
-        (Ty->isImageType() || Ty->isSamplerT() || Ty->isPipeType()
+        (Ty->isImageType() || Ty->isSamplerT()// || Ty->isPipeType()
         || Ty->isBlockPointerType())) {
       return ExprError(Diag(OpLoc, diag::err_typecheck_unary_expr)
                        << InputExpr->getType()
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/test/SemaOpenCL/invalid-pipes-cl2.0.cl b/test/SemaOpenCL/invalid-pipes-cl2.0.cl
--- a/test/SemaOpenCL/invalid-pipes-cl2.0.cl	2017-10-17 19:55:08.973311668 +0300
+++ b/test/SemaOpenCL/invalid-pipes-cl2.0.cl	2017-10-17 20:20:38.753387855 +0300
@@ -22,8 +22,8 @@
 void test5(pipe int p) {
   p+p; // expected-error{{invalid operands to binary expression ('read_only pipe int' and 'read_only pipe int')}}
   p=p; // expected-error{{invalid operands to binary expression ('read_only pipe int' and 'read_only pipe int')}}
-  &p; // expected-error{{invalid argument type 'read_only pipe int' to unary expression}}
-  *p; // expected-error{{invalid argument type 'read_only pipe int' to unary expression}}
+  (void)&p;
+  (void)*p; // expected-error{{indirection requires pointer operand ('read_only pipe int' invalid)}}
 }
 
 typedef pipe int pipe_int_t;
