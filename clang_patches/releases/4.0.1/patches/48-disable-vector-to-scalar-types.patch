diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/CodeGen/TargetInfo.cpp b/lib/CodeGen/TargetInfo.cpp
--- a/lib/CodeGen/TargetInfo.cpp	2017-10-17 19:48:27.477291672 +0300
+++ b/lib/CodeGen/TargetInfo.cpp	2017-10-17 20:25:38.793402798 +0300
@@ -92,6 +92,23 @@
   return Address::invalid();
 }
 
+static ABIArgInfo classifyOpenCL(QualType Ty, ASTContext &Context) {
+  if (Ty->isVoidType())
+    return ABIArgInfo::getIgnore();
+
+  if (const EnumType *EnumTy = Ty->getAs<EnumType>())
+    Ty = EnumTy->getDecl()->getIntegerType();
+
+  if (const RecordType *RT = Ty->getAs<RecordType>())
+    return ABIArgInfo::getIndirect(Context.getTypeAlignInChars(RT),
+                                   /*ByVal=*/false);
+
+  if (Ty->isPromotableIntegerType())
+    return ABIArgInfo::getExtend();
+
+  return ABIArgInfo::getDirect();
+}
+
 ABIInfo::~ABIInfo() {}
 
 /// Does the given lowering require more than the given number of
@@ -1698,6 +1715,23 @@
 }
 
 void X86_32ABIInfo::computeInfo(CGFunctionInfo &FI) const {
+  ASTContext &Context = getContext();
+
+  if (Context.getLangOpts().OpenCL) {
+    // Use OpenCL classify to prevent coercing
+    // Otherwise, vector types will be coerced to a matching integer
+    // type to conform with ABI, e.g.:
+    // <8 x i8> will be coerced to i64
+
+    FI.getReturnInfo() = classifyOpenCL(FI.getReturnType(), Context);
+
+    for (CGFunctionInfo::arg_iterator it = FI.arg_begin(), ie = FI.arg_end();
+         it != ie; ++it)
+      it->info= classifyOpenCL(it->type, Context);
+
+    return;
+  }
+
   CCState State(FI.getCallingConvention());
   if (IsMCUABI)
     State.FreeRegs = 3;
@@ -3483,6 +3517,23 @@
 
 void X86_64ABIInfo::computeInfo(CGFunctionInfo &FI) const {
 
+  ASTContext &Context = getContext();
+
+  if (Context.getLangOpts().OpenCL) {
+    // Use OpenCL classify to prevent coercing
+    // Otherwise, vector types will be coerced to a matching integer
+    // type to conform with ABI, e.g.:
+    // <8 x i8> will be coerced to i64
+
+    FI.getReturnInfo() = classifyOpenCL(FI.getReturnType(), Context);
+
+    for (CGFunctionInfo::arg_iterator it = FI.arg_begin(), ie = FI.arg_end();
+         it != ie; ++it)
+      it->info= classifyOpenCL(it->type, Context);
+
+    return;
+  }
+
   bool IsRegCall = FI.getCallingConvention() == llvm::CallingConv::X86_RegCall;
 
   // Keep track of the number of assigned registers.
@@ -3912,6 +3963,22 @@
 }
 
 void WinX86_64ABIInfo::computeInfo(CGFunctionInfo &FI) const {
+  ASTContext &Context = getContext();
+  if (Context.getLangOpts().OpenCL) {
+    // Use OpenCL classify to prevent coercing
+    // Otherwise, vector types will be coerced to a matching integer
+    // type to conform with ABI, e.g.:
+    // <8 x i8> will be coerced to i64
+
+    FI.getReturnInfo() = classifyOpenCL(FI.getReturnType(), Context);
+
+    for (CGFunctionInfo::arg_iterator it = FI.arg_begin(), ie = FI.arg_end();
+         it != ie; ++it)
+      it->info= classifyOpenCL(it->type, Context);
+
+    return;
+  }
+
   bool IsVectorCall =
       FI.getCallingConvention() == llvm::CallingConv::X86_VectorCall;
   bool IsRegCall = FI.getCallingConvention() == llvm::CallingConv::X86_RegCall;
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/test/CodeGenOpenCL/kernels-have-spir-cc-by-default.cl b/test/CodeGenOpenCL/kernels-have-spir-cc-by-default.cl
--- a/test/CodeGenOpenCL/kernels-have-spir-cc-by-default.cl	2017-10-17 19:45:18.301282250 +0300
+++ b/test/CodeGenOpenCL/kernels-have-spir-cc-by-default.cl	2017-10-17 20:25:38.793402798 +0300
@@ -59,7 +59,7 @@
 void test_function(int_pair input, global int* output) {
 // CHECK-NOT: spir_kernel
 // AMDGCN-NOT: define amdgpu_kernel void @test_function
-// CHECK: i64 %input.coerce0, i64 %input.coerce1, i32* nocapture %output
+// CHECK: %struct.int_pair* nocapture readonly %input, i32* nocapture %output
  output[0] = (int)input.a;
  output[1] = (int)input.b;
 }
