diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/include/clang/Basic/OpenCLOptions.h b/include/clang/Basic/OpenCLOptions.h
--- a/include/clang/Basic/OpenCLOptions.h	2017-12-07 14:08:25.502149816 +0300
+++ b/include/clang/Basic/OpenCLOptions.h	2017-12-07 14:16:21.274173511 +0300
@@ -47,6 +47,15 @@
     return I.Supported && I.Avail <= CLVer;
   }
 
+  // Is \pExt an (optional) OpenCL core feature for OpenCL version \p CLVer.
+  bool isCore(llvm::StringRef Ext, unsigned CLVer) const {
+    auto it = OptMap.find(Ext);
+    if (it == OptMap.end())
+      return false; // unknown feature
+    Info I = it->getValue();
+    return I.Core != ~0U && CLVer >= I.Core;
+  }
+
   // Is supported (optional) OpenCL core features for OpenCL version \p CLVer.
   // For supported extension, return false.
   bool isSupportedCore(llvm::StringRef Ext, unsigned CLVer) const {
@@ -146,6 +155,24 @@
         I->second.Enabled = true;
   }
 
+  /// \brief Enable or disable OpenCL core features only, ignoring extensions
+  /// \param Ext name of the feature optionally prefixed with '+' or '-'
+  /// \param V used when \p Ext is not prefixed by '+' or '-'
+  void toggleCoreFeatureIsEnabled(llvm::StringRef Ext, unsigned CLVer,
+                                  bool V = true) {
+    assert(!Ext.empty() && "Extension is empty.");
+    Ext = split(Ext, V);
+
+    if (Ext.equals("all")) {
+      for (auto& I : OptMap)
+        if (isCore(I.getKey(), CLVer))
+          I.second.Enabled = V;
+    }
+    else if (isCore(Ext, CLVer)) {
+      OptMap[Ext].Enabled = V;
+    }
+  }
+
   friend class ASTWriter;
   friend class ASTReader;
 };
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/Serialization/ASTReader.cpp b/lib/Serialization/ASTReader.cpp
--- a/lib/Serialization/ASTReader.cpp	2017-12-07 14:08:25.510149816 +0300
+++ b/lib/Serialization/ASTReader.cpp	2017-12-07 14:16:21.274173511 +0300
@@ -7150,10 +7150,16 @@
   SemaObj->OpenCLDeclExtMap = OpenCLDeclExtMap;
 
   // OpenCL features imported from a module can be overwritten by -cl-ext option
-  for (const auto &Ext :
+  for (const std::string &Ext:
        Context.getTargetInfo().getTargetOpts().OpenCLExtensionsAsWritten) {
-    SemaObj->OpenCLFeatures.support(Ext);
-    SemaObj->OpenCLFeatures.enable(Ext);
+    OpenCLOptions& OCLFeatures = SemaObj->OpenCLFeatures;
+    OCLFeatures.support(Ext);
+    /// If we specify via -cl-ext that an *extension* is supported, it doesn't
+    /// mean that it is enabled. Corresponding pragma must be used to enable it.
+    /// But if we specify via -cl-ext that a *core feature* is not supported we
+    /// need to disable it, because pragma is ignored for core features.
+    const unsigned OCLVersion = SemaObj->getLangOpts().OpenCLVersion;
+    OCLFeatures.toggleCoreFeatureIsEnabled(Ext, OCLVersion);
   }
 
   UpdateSema();
