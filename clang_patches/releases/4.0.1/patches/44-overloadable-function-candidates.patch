diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/include/clang/AST/Type.h b/include/clang/AST/Type.h
--- a/include/clang/AST/Type.h	2017-10-17 14:24:50.080324627 +0300
+++ b/include/clang/AST/Type.h	2017-10-17 20:13:46.249367311 +0300
@@ -1648,6 +1648,7 @@
   bool isComplexType() const;      // C99 6.2.5p11 (complex)
   bool isAnyComplexType() const;   // C99 6.2.5p11 (complex) + Complex Int.
   bool isFloatingType() const;     // C99 6.2.5p11 (real floating + complex)
+  bool isDoubleType() const;       // (double + long double)
   bool isHalfType() const;         // OpenCL 6.1.1.1, NEON (IEEE 754-2008 half)
   bool isRealType() const;         // C99 6.2.5p17 (real floating + integer)
   bool isArithmeticType() const;   // C99 6.2.5p18 (integer + floating)
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/include/clang/Sema/Overload.h b/include/clang/Sema/Overload.h
--- a/include/clang/Sema/Overload.h	2017-10-17 14:59:19.136427672 +0300
+++ b/include/clang/Sema/Overload.h	2017-10-17 20:13:46.249367311 +0300
@@ -598,6 +598,8 @@
     /// (CUDA) This candidate was not viable because the callee
     /// was not accessible from the caller's target (i.e. host->device,
     /// global->host, device->host).
+    /// (OpenCL) This candidate was not viable because the callee
+    /// uses extensions that are not enabled or supported.
     ovl_fail_bad_target,
 
     /// This candidate function was not viable because an enable_if
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/AST/Type.cpp b/lib/AST/Type.cpp
--- a/lib/AST/Type.cpp	2017-10-17 14:24:50.096324628 +0300
+++ b/lib/AST/Type.cpp	2017-10-17 20:13:46.249367311 +0300
@@ -1809,6 +1809,13 @@
   return false;
 }
 
+bool Type::isDoubleType() const {
+  if (const BuiltinType *BT = dyn_cast<BuiltinType>(CanonicalType))
+    return BT->getKind() >= BuiltinType::Double &&
+      BT->getKind() <= BuiltinType::LongDouble;
+  return false;
+}
+
 bool Type::hasFloatingRepresentation() const {
   if (const VectorType *VT = dyn_cast<VectorType>(CanonicalType))
     return VT->getElementType()->isFloatingType();
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/Sema/SemaOverload.cpp b/lib/Sema/SemaOverload.cpp
--- a/lib/Sema/SemaOverload.cpp	2017-10-17 14:59:19.144427673 +0300
+++ b/lib/Sema/SemaOverload.cpp	2017-10-17 20:13:46.265367312 +0300
@@ -5962,6 +5962,44 @@
     return;
   }
 
+  // OpenCL
+  // A candidate function that uses extentions that are not enabled or
+  // supported is not viable.
+  bool hasHalf =
+      getOpenCLOptions().isSupported("cl_khr_fp16", getLangOpts().OpenCLVersion) // check that target supports half
+      && getOpenCLOptions().isEnabled("cl_khr_fp16");
+  bool hasDouble =
+      getOpenCLOptions().isSupported("cl_khr_fp64", getLangOpts().OpenCLVersion) // check that target supports double
+      && getOpenCLOptions().isEnabled("cl_khr_fp64");
+
+  if (getLangOpts().OpenCL) {
+    if (!hasHalf && Function->getReturnType()->isHalfType()) {
+      Candidate.Viable = false;
+      Candidate.FailureKind = ovl_fail_bad_target;
+      return;
+    }
+    if (!hasDouble && Function->getReturnType()->isDoubleType()) {
+      Candidate.Viable = false;
+      Candidate.FailureKind = ovl_fail_bad_target;
+      return;
+    }
+    for (FunctionDecl::param_iterator PI = Function->param_begin(),
+         PE = Function->param_end(); PI != PE; ++PI) {
+      ParmVarDecl *Param = *PI;
+      QualType PT = Param->getType();
+      if (!hasHalf && PT->isHalfType()) {
+        Candidate.Viable = false;
+        Candidate.FailureKind = ovl_fail_bad_target;
+        return;
+      }
+      if (!hasDouble && PT->isDoubleType()) {
+        Candidate.Viable = false;
+        Candidate.FailureKind = ovl_fail_bad_target;
+        return;
+      }
+    }
+  }
+
   // (CUDA B.1): Check for invalid calls between targets.
   if (getLangOpts().CUDA)
     if (const FunctionDecl *Caller = dyn_cast<FunctionDecl>(CurContext))
