diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/include/clang/Basic/DiagnosticSemaKinds.td b/include/clang/Basic/DiagnosticSemaKinds.td
--- a/include/clang/Basic/DiagnosticSemaKinds.td	2017-10-17 14:12:32.844287910 +0300
+++ b/include/clang/Basic/DiagnosticSemaKinds.td	2017-10-17 14:21:44.932315406 +0300
@@ -8210,6 +8210,8 @@
   "invalid block variable declaration - must be %select{const qualified|initialized}0">;
 def err_opencl_extern_block_declaration : Error<
   "invalid block variable declaration - using 'extern' storage class is disallowed">;
+def err_opencl_block_ref_block : Error<
+  "cannot refer to a block inside block">;
 
 // OpenCL v2.0 s6.13.9 - Address space qualifier functions. 
 def err_opencl_builtin_to_addr_arg_num : Error<
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/Sema/SemaExpr.cpp b/lib/Sema/SemaExpr.cpp
--- a/lib/Sema/SemaExpr.cpp	2017-10-17 14:18:57.620307073 +0300
+++ b/lib/Sema/SemaExpr.cpp	2017-10-17 14:21:44.956315407 +0300
@@ -13557,6 +13557,13 @@
     }
     return false;
   }
+  // OpenCL v2.0 s6.12.5: Blocks cannot reference/capture other blocks
+  if (S.getLangOpts().OpenCL && IsBlock &&
+      Var->getType()->isBlockPointerType()) {
+    if (Diagnose)
+      S.Diag(Loc, diag::err_opencl_block_ref_block);
+    return false;
+  }
 
   return true;
 }
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/test/SemaOpenCL/invalid-block.cl b/test/SemaOpenCL/invalid-block.cl
--- a/test/SemaOpenCL/invalid-block.cl	2017-10-17 14:18:05.484304477 +0300
+++ b/test/SemaOpenCL/invalid-block.cl	2017-10-17 14:21:44.956315407 +0300
@@ -66,3 +66,18 @@
   *bl;      // expected-error {{invalid argument type 'bl2_t' (aka 'int (__generic ^const)(int)') to unary expression}}
   &bl;      // expected-error {{invalid argument type 'bl2_t' (aka 'int (__generic ^const)(int)') to unary expression}}
 }
+// A block can't reference another block
+kernel void f7() {
+  bl2_t bl1 = ^(int i) {
+    return 1;
+  };
+  void (^bl2)(void) = ^{
+    int i = bl1(1); // expected-error {{cannot refer to a block inside block}}
+  };
+  void (^bl3)(void) = ^{
+  };
+  void (^bl4)(void) = ^{
+    bl3(); // expected-error {{cannot refer to a block inside block}}
+  };
+  return;
+}
