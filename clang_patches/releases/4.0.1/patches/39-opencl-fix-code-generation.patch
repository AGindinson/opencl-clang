diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/CodeGen/CGDecl.cpp b/lib/CodeGen/CGDecl.cpp
--- a/lib/CodeGen/CGDecl.cpp	2017-10-17 16:35:26.864714923 +0300
+++ b/lib/CodeGen/CGDecl.cpp	2017-10-17 19:56:00.293314224 +0300
@@ -159,6 +159,10 @@
   // needs to be emitted like a static variable, e.g. a function-scope
   // variable in constant address space in OpenCL.
   if (D.getStorageDuration() != SD_Automatic) {
+    // Static sampler variables translated to function calls.
+    if (D.getType()->isSamplerT())
+      return;
+
     llvm::GlobalValue::LinkageTypes Linkage =
         CGM.getLLVMLinkageVarDefinition(&D, /*isConstant=*/false);
 
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/test/CodeGenOpenCL/sampler.cl b/test/CodeGenOpenCL/sampler.cl
--- a/test/CodeGenOpenCL/sampler.cl	2017-10-17 15:31:52.748524968 +0300
+++ b/test/CodeGenOpenCL/sampler.cl	2017-10-17 19:56:00.293314224 +0300
@@ -58,4 +58,11 @@
   fnc4smp(5);
   // CHECK: [[SAMP:%[0-9]+]] = call %opencl.sampler_t addrspace(2)* @__translate_sampler_initializer(i32 5)
   // CHECK: call spir_func void @fnc4smp(%opencl.sampler_t addrspace(2)* [[SAMP]])
+
+  const sampler_t const_smp = CLK_ADDRESS_CLAMP_TO_EDGE | CLK_NORMALIZED_COORDS_TRUE | CLK_FILTER_LINEAR;
+  // CHECK: [[CONST_SAMP:%[0-9]+]] = call %opencl.sampler_t addrspace(2)* @__translate_sampler_initializer(i32 35)
+  // CHECK: store %opencl.sampler_t addrspace(2)* [[CONST_SAMP]], %opencl.sampler_t addrspace(2)** [[CONST_SMP_PTR:%[a-zA-Z0-9]+]]
+  fnc4smp(const_smp);
+  // CHECK: [[SAMP:%[0-9]+]] = load %opencl.sampler_t addrspace(2)*, %opencl.sampler_t addrspace(2)** [[CONST_SMP_PTR]]
+  // CHECK: call spir_func void @fnc4smp(%opencl.sampler_t addrspace(2)* [[SAMP]])
 }
