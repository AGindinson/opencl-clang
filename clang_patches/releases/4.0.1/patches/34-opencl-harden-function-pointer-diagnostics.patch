diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/include/clang/Basic/DiagnosticSemaKinds.td b/include/clang/Basic/DiagnosticSemaKinds.td
--- a/include/clang/Basic/DiagnosticSemaKinds.td	2017-10-17 19:43:39.209277315 +0300
+++ b/include/clang/Basic/DiagnosticSemaKinds.td	2017-10-17 19:46:09.105284781 +0300
@@ -7105,7 +7105,7 @@
   "invalid conversion between vector type %0 and integer type %1 "
   "of different size">;
 
-def err_opencl_function_pointer_variable : Error<
+def err_opencl_function_pointer : Error<
   "pointers to functions are not allowed">;
 
 def err_opencl_taking_function_address : Error<
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/Sema/SemaDecl.cpp b/lib/Sema/SemaDecl.cpp
--- a/lib/Sema/SemaDecl.cpp	2017-10-17 19:43:39.229277316 +0300
+++ b/lib/Sema/SemaDecl.cpp	2017-10-17 19:46:09.113284781 +0300
@@ -5938,7 +5938,7 @@
     QualType NR = R;
     while (NR->isPointerType()) {
       if (NR->isFunctionPointerType()) {
-        Diag(D.getIdentifierLoc(), diag::err_opencl_function_pointer_variable);
+        Diag(D.getIdentifierLoc(), diag::err_opencl_function_pointer);
         D.setInvalidType();
         break;
       }
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/lib/Sema/SemaType.cpp b/lib/Sema/SemaType.cpp
--- a/lib/Sema/SemaType.cpp	2017-10-17 19:45:18.301282250 +0300
+++ b/lib/Sema/SemaType.cpp	2017-10-17 19:46:09.117284781 +0300
@@ -1913,6 +1913,11 @@
     return QualType();
   }
 
+  if (T->isFunctionType() && getLangOpts().OpenCL) {
+    Diag(Loc, diag::err_opencl_function_pointer);
+    return QualType();
+  }
+
   if (checkQualifiedFunction(*this, T, Loc, QFK_Pointer))
     return QualType();
 
diff -Naur --strip-trailing-cr -x cclang -x .git -x .gitignore a/test/SemaOpenCL/func.cl b/test/SemaOpenCL/func.cl
--- a/test/SemaOpenCL/func.cl	2017-10-17 14:06:40.328270354 +0300
+++ b/test/SemaOpenCL/func.cl	2017-10-17 19:46:09.117284781 +0300
@@ -4,8 +4,15 @@
 void vararg_f(int, ...);                    // expected-error {{invalid prototype, variadic arguments are not allowed in OpenCL}}
 void __vararg_f(int, ...);
 typedef void (*vararg_fptr_t)(int, ...);    // expected-error {{invalid prototype, variadic arguments are not allowed in OpenCL}}
+                                            // expected-error@-1{{pointers to functions are not allowed}}
 int printf(__constant const char *st, ...); // expected-error {{invalid prototype, variadic arguments are not allowed in OpenCL}}
 
+// Struct type with function pointer field
+typedef struct s
+{
+   void (*f)(struct s *self, int *i);       // expected-error{{pointers to functions are not allowed}}
+} s_t;
+
 //Function pointer
 void foo(void*);
 
